#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
in vec3 worldposition;
in vec4 shadowCoordsClose;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform sampler2D shadowMapClose;
uniform float hasTransparency;
uniform float glowAmount;

//const int pcfCount = 2;
const float totalTexelsClose = 25;//(pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0); //25

//const float mapSizeClose = 4096; //2048*2    Must be kept in sync with constants in c++ code
//const float texelSizeClose = 0.000244140625;  //1.0 / mapSizeClose

const vec2 it1  = vec2(-2, -2) * 0.000244140625;
const vec2 it2  = vec2(-2, -1) * 0.000244140625;
const vec2 it3  = vec2(-2,  0) * 0.000244140625;
const vec2 it4  = vec2(-2,  1) * 0.000244140625;
const vec2 it5  = vec2(-2,  2) * 0.000244140625;
const vec2 it6  = vec2(-1, -2) * 0.000244140625;
const vec2 it7  = vec2(-1, -1) * 0.000244140625;
const vec2 it8  = vec2(-1,  0) * 0.000244140625;
const vec2 it9  = vec2(-1,  1) * 0.000244140625;
const vec2 it10 = vec2(-1,  2) * 0.000244140625;
const vec2 it11 = vec2( 0, -2) * 0.000244140625;
const vec2 it12 = vec2( 0, -1) * 0.000244140625;
const vec2 it13 = vec2( 0,  0) * 0.000244140625;
const vec2 it14 = vec2( 0,  1) * 0.000244140625;
const vec2 it15 = vec2( 0,  2) * 0.000244140625;
const vec2 it16 = vec2( 1, -2) * 0.000244140625;
const vec2 it17 = vec2( 1, -1) * 0.000244140625;
const vec2 it18 = vec2( 1,  0) * 0.000244140625;
const vec2 it19 = vec2( 1,  1) * 0.000244140625;
const vec2 it20 = vec2( 1,  2) * 0.000244140625;
const vec2 it21 = vec2( 2, -2) * 0.000244140625;
const vec2 it22 = vec2( 2, -1) * 0.000244140625;
const vec2 it23 = vec2( 2,  0) * 0.000244140625;
const vec2 it24 = vec2( 2,  1) * 0.000244140625;
const vec2 it25 = vec2( 2,  2) * 0.000244140625;

void main(void)
{
	float totalClose = 0.0;
	
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it1).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it2).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it3).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it4).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it5).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it6).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it7).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it8).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy +  it9).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it10).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it11).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it12).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it13).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it14).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it15).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it16).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it17).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it18).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it19).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it20).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it21).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it22).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it23).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it24).r+0.0025) { totalClose += 1.0; }
	if (shadowCoordsClose.z > texture(shadowMapClose, shadowCoordsClose.xy + it25).r+0.0025) { totalClose += 1.0; }
	
	totalClose /= totalTexelsClose;
	
	float lightFactor = 1.0 - (totalClose * shadowCoordsClose.w * 0.4); //0.4 being how dark the shadows are
	
	
	
	
	vec4 rawTextureColour = texture(textureSampler, pass_textureCoords);
	if (hasTransparency == 0) //&& glowAmount == 0
	{
		if (rawTextureColour.a < 0.9)
		{
			discard;
		}
		rawTextureColour.a = 1;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = nDotl*0.5+0.5;  //two different types of lighting options
	//float brightness = max(nDotl, 0.5);  //two different types of lighting options
	
	//make more ambient light happen during the daytime, less at night
	float ambientLight = 0.5+0.5*dot(vec3(0, 1, 0), unitLightVector);
	ambientLight = (0.02+ambientLight*0.3);
	
	
	vec3 diffuse = max(brightness * lightColour * lightFactor, ambientLight * lightColour);
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	finalSpecular = finalSpecular * (lightFactor - 0.6) * 2.5; //Make no specular lighting happen it the shadow
	
	if (glowAmount > 0.0)
	{
		diffuse = vec3(glowAmount);
	}
	
	out_Color = vec4(diffuse, rawTextureColour.a) * rawTextureColour + vec4(finalSpecular, rawTextureColour.a);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}